{
  "stats": {
    "suites": 4,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-15T10:38:24.243Z",
    "end": "2024-07-15T10:43:06.965Z",
    "duration": 282722,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "86db3e38-4c93-466f-a51d-ec6b62272512",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4822aead-07c5-4128-a1a6-f32e33eef6bc",
          "title": "Create, edit and remove project by the SA and measure metrics in the",
          "fullFile": "C:\\terenbro\\colorjob-measure-metrics\\test\\createEditRemoveProjectBySA.test.js",
          "file": "\\test\\createEditRemoveProjectBySA.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Create, edit and remove project by the SA and measure metrics in the\"",
              "fullTitle": "Create, edit and remove project by the SA and measure metrics in the \"before each\" hook in \"Create, edit and remove project by the SA and measure metrics in the\"",
              "timedOut": null,
              "duration": 48665,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "// testname = `Create, edit and remove project by the SA and measure metrics in the ${browser}`;\ndriver = await createDriver(browser, bVersion, os);",
              "err": {},
              "uuid": "46ea6b5d-1e2a-4d98-a055-bdbc5d713a06",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Create, edit and remove project by the SA and measure metrics in the\"",
              "fullTitle": "Create, edit and remove project by the SA and measure metrics in the \"after each\" hook in \"Create, edit and remove project by the SA and measure metrics in the\"",
              "timedOut": null,
              "duration": 353,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "if (driver) {\n  await driver.quit();\n}",
              "err": {},
              "uuid": "83677016-1fb4-4e0c-900a-e47c45ddd5b9",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "create new project",
              "fullTitle": "Create, edit and remove project by the SA and measure metrics in the create new project",
              "timedOut": null,
              "duration": 37451,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testname = `Create new project in the ${browser}`;\nawait driver.executeScript(`lambda-name=${testname}`);\nconsole.log(Date().toLocaleLowerCase(), 'date', config.urlLoginPage);\nconst logginPageTest = new LoginPage(driver, config.urlLoginPage);\nconst createProjectTest = new CreateProject(driver);\nawait logginPageTest.openLoginForm();\nawait logginPageTest.fillEmailInput(config.email);\nawait logginPageTest.fillPasswordInput(config.password);\nawait logginPageTest.checkSaveForFuture();\nawait logginPageTest.login(config.urlhomePageForCheck);\ntry {\n  const firstMeasure = await createProjectTest.goToProjectListMeasureTime();\n  const secondMeasure =\n    await createProjectTest.fillCreateProjectFieldsMeasureTime(\n      config.companyName,\n      newProjectkey,\n      newProjectNumber,\n      newCompanyProjectBelong,\n      newProjectStreet,\n      newProjectApp,\n      newProjectState,\n      newCompanProjectCity,\n      newProjectZip,\n      newProjectClientName,\n      startDate,\n      eneDate\n    );\n  const thirdMeasure =\n    await createProjectTest.goToProjectDetailsPageMeasureTime(\n      config.companyName\n    );\n  createProjectMesuer['Time metrics for project creation by the SA'] = {\n    ...firstMeasure,\n    ...secondMeasure,\n    ...thirdMeasure,\n  };\n  if (browser === \"Safari\") {\n    saveMetrics(config.metricsFilePath, config.metricfileNameSafari, createProjectMesuer)\n  } else {\n     saveMetrics(config.metricsFilePath, config.metricfileNameChrom, createProjectMesuer)\n  }\n  await driver.executeScript(\"lambda-status=passed\");\n  // console.log(createProjectMesuer);\n} catch (error) {\n  await makeScreenshot(driver, 'project_create');\n  await driver.executeScript(\"lambda-status=failed\");\n  throw error;\n}",
              "err": {},
              "uuid": "d545ce2c-b131-423d-8222-95aee5ef273b",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "remove project",
              "fullTitle": "Create, edit and remove project by the SA and measure metrics in the remove project",
              "timedOut": null,
              "duration": 16520,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testname = `Remove new project in the ${browser}`;\nawait driver.executeScript(`lambda-name=${testname}`);\nconsole.log(Date().toLocaleLowerCase(), 'date', config.urlLoginPage);\nconst logginPageTest = new LoginPage(driver, config.urlLoginPage);\nconst removeProject = new RemoveProject(driver);\ntry {\n  await logginPageTest.openLoginForm();\n  await logginPageTest.fillEmailInput(config.email);\n  await logginPageTest.fillPasswordInput(config.password);\n  await logginPageTest.checkSaveForFuture();\n  await logginPageTest.login(config.urlhomePageForCheck);\n  await removeProject.goToProjectList();\n  await removeProject.findProject(config.companyName, config.projectsPage);\n  await removeProject.removefindProject(config.companyName);\n  await driver.executeScript(\"lambda-status=passed\");\n} catch (error) {\n  await makeScreenshot(driver, 'project_remove');\n  await driver.executeScript(\"lambda-status=failed\");\n  throw error;\n}",
              "err": {},
              "uuid": "a7faaeb7-b465-4633-b9be-71ccd52a1713",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d545ce2c-b131-423d-8222-95aee5ef273b",
            "a7faaeb7-b465-4633-b9be-71ccd52a1713"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 53971,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "ee0995e9-1698-4c3e-a882-d3ca3b1ce483",
          "title": "Create, edit and remove project by the SA and measure metrics in the",
          "fullFile": "C:\\terenbro\\colorjob-measure-metrics\\test\\createEditRemoveProjectBySA.test.js",
          "file": "\\test\\createEditRemoveProjectBySA.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Create, edit and remove project by the SA and measure metrics in the\"",
              "fullTitle": "Create, edit and remove project by the SA and measure metrics in the \"before each\" hook in \"Create, edit and remove project by the SA and measure metrics in the\"",
              "timedOut": null,
              "duration": 39629,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "// testname = `Create, edit and remove project by the SA and measure metrics in the ${browser}`;\ndriver = await createDriver(browser, bVersion, os);",
              "err": {},
              "uuid": "8ff3e8ba-d2c2-4fe1-994d-2aa1e6cec4ea",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Create, edit and remove project by the SA and measure metrics in the\"",
              "fullTitle": "Create, edit and remove project by the SA and measure metrics in the \"after each\" hook in \"Create, edit and remove project by the SA and measure metrics in the\"",
              "timedOut": null,
              "duration": 210,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "if (driver) {\n  await driver.quit();\n}",
              "err": {},
              "uuid": "4ec92cd3-5191-4436-b93b-c5542f4dd7ed",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "create new project",
              "fullTitle": "Create, edit and remove project by the SA and measure metrics in the create new project",
              "timedOut": null,
              "duration": 40996,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testname = `Create new project in the ${browser}`;\nawait driver.executeScript(`lambda-name=${testname}`);\nconsole.log(Date().toLocaleLowerCase(), 'date', config.urlLoginPage);\nconst logginPageTest = new LoginPage(driver, config.urlLoginPage);\nconst createProjectTest = new CreateProject(driver);\nawait logginPageTest.openLoginForm();\nawait logginPageTest.fillEmailInput(config.email);\nawait logginPageTest.fillPasswordInput(config.password);\nawait logginPageTest.checkSaveForFuture();\nawait logginPageTest.login(config.urlhomePageForCheck);\ntry {\n  const firstMeasure = await createProjectTest.goToProjectListMeasureTime();\n  const secondMeasure =\n    await createProjectTest.fillCreateProjectFieldsMeasureTime(\n      config.companyName,\n      newProjectkey,\n      newProjectNumber,\n      newCompanyProjectBelong,\n      newProjectStreet,\n      newProjectApp,\n      newProjectState,\n      newCompanProjectCity,\n      newProjectZip,\n      newProjectClientName,\n      startDate,\n      eneDate\n    );\n  const thirdMeasure =\n    await createProjectTest.goToProjectDetailsPageMeasureTime(\n      config.companyName\n    );\n  createProjectMesuer['Time metrics for project creation by the SA'] = {\n    ...firstMeasure,\n    ...secondMeasure,\n    ...thirdMeasure,\n  };\n  if (browser === \"Safari\") {\n    saveMetrics(config.metricsFilePath, config.metricfileNameSafari, createProjectMesuer)\n  } else {\n     saveMetrics(config.metricsFilePath, config.metricfileNameChrom, createProjectMesuer)\n  }\n  await driver.executeScript(\"lambda-status=passed\");\n  // console.log(createProjectMesuer);\n} catch (error) {\n  await makeScreenshot(driver, 'project_create');\n  await driver.executeScript(\"lambda-status=failed\");\n  throw error;\n}",
              "err": {},
              "uuid": "7e90500a-80c1-4d57-9975-829efac9e5dd",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "remove project",
              "fullTitle": "Create, edit and remove project by the SA and measure metrics in the remove project",
              "timedOut": null,
              "duration": 19119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testname = `Remove new project in the ${browser}`;\nawait driver.executeScript(`lambda-name=${testname}`);\nconsole.log(Date().toLocaleLowerCase(), 'date', config.urlLoginPage);\nconst logginPageTest = new LoginPage(driver, config.urlLoginPage);\nconst removeProject = new RemoveProject(driver);\ntry {\n  await logginPageTest.openLoginForm();\n  await logginPageTest.fillEmailInput(config.email);\n  await logginPageTest.fillPasswordInput(config.password);\n  await logginPageTest.checkSaveForFuture();\n  await logginPageTest.login(config.urlhomePageForCheck);\n  await removeProject.goToProjectList();\n  await removeProject.findProject(config.companyName, config.projectsPage);\n  await removeProject.removefindProject(config.companyName);\n  await driver.executeScript(\"lambda-status=passed\");\n} catch (error) {\n  await makeScreenshot(driver, 'project_remove');\n  await driver.executeScript(\"lambda-status=failed\");\n  throw error;\n}",
              "err": {},
              "uuid": "1c5063a6-c4c2-4e48-b417-9e85ab0fac60",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7e90500a-80c1-4d57-9975-829efac9e5dd",
            "1c5063a6-c4c2-4e48-b417-9e85ab0fac60"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 60115,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "b6b92dd3-f547-4adf-b46c-9f0dc5fa07f0",
          "title": "Invite and remove user by the Company Admin and measure metrics",
          "fullFile": "C:\\terenbro\\colorjob-measure-metrics\\test\\inviteAndRemoveUserByCA.test.js",
          "file": "\\test\\inviteAndRemoveUserByCA.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics \"before each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "timedOut": null,
              "duration": 46574,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await createDriver(browser, bVersion, os);",
              "err": {},
              "uuid": "ee5a1e5f-4586-481a-a0ba-72da3629c86d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics \"after each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "timedOut": null,
              "duration": 342,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "if (driver) {\n  await driver.quit();\n}\nreturn;",
              "err": {},
              "uuid": "493ba060-a570-44d9-a545-5f3a731aa345",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "invite user by the company admin",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics invite user by the company admin",
              "timedOut": null,
              "duration": 22375,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await driver.executeScript(\"document.body.style.zoom='50%'\");\ntestname = `Invite user by the company admin${browser}`;\nawait driver.executeScript(`lambda-name=${testname}`);\nconst logginPageTest = new LoginPage(driver, config.urlLoginPage);\nconst inviteUserTest = new InviteUser(driver);\nawait logginPageTest.openLoginForm();\nawait logginPageTest.fillEmailInput(config.emailCA);\nawait logginPageTest.fillPasswordInput(config.passwordCA);\nawait logginPageTest.checkSaveForFuture();\nawait logginPageTest.login(config.mainCompanyPage);\ntry {\n  await inviteUserTest.goToView(config.projectNameMain, 'ca');\n  await inviteUserTest.goToSelektTab(config.users);\n  const firstMeasure =\n    await inviteUserTest.openInviteUserFormInProjectMeasureTime();\n  const secondMeasure =\n    await inviteUserTest.fillInviteFormByCAMeasureTime(\n      config.emailUseForTest,\n      config.projManager\n    );\n  await inviteUserTest.checkCreateNewUser(config.emailUseForTest);\n  inviteUserMeasure['Time metrics for invite user by CA'] = {\n    ...firstMeasure,\n    ...secondMeasure,\n  };\n  if (browser === 'Safari') {\n    saveMetrics(\n      config.metricsFilePath,\n      config.metricfileNameSafari,\n      inviteUserMeasure\n    );\n  } else {\n    saveMetrics(\n      config.metricsFilePath,\n      config.metricfileNameChrom,\n      inviteUserMeasure\n    );\n  }\n  await driver.executeScript('lambda-status=passed');\n} catch (error) {\n  await makeScreenshot(driver, 'user_create_by_CA');\n  await driver.executeScript('lambda-status=failed');\n  throw error;\n}",
              "err": {},
              "uuid": "2c7b9dc9-ff6e-4cad-ac81-384d46b31a6d",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "remove user by the company admin",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics remove user by the company admin",
              "timedOut": null,
              "duration": 13708,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testname = `Remove user by the company admin${browser}`;\nawait driver.executeScript(`lambda-name=${testname}`);\nconst logginPageTest = new LoginPage(driver, config.urlLoginPage);\nconst removeUserTest = new RemoveUser(driver);\nawait logginPageTest.openLoginForm();\nawait logginPageTest.fillEmailInput(config.emailCA);\nawait logginPageTest.fillPasswordInput(config.passwordCA);\nawait logginPageTest.checkSaveForFuture();\nawait logginPageTest.login(config.mainCompanyPage);\ntry {\n  await removeUserTest.goToUserList('ca');\n  await removeUserTest.findUser(\n    config.emailUseForTest,\n    config.mainCompanyUsersPage\n  );\n  await removeUserTest.removefindUser();\n  await removeUserTest.checkIfUserRemove(\n    config.emailUseForTest,\n    config.mainCompanyUsersPage\n  );\n  await driver.executeScript('lambda-status=passed');\n} catch (error) {\n  await makeScreenshot(driver, 'user_remove_by_CA');\n  await driver.executeScript('lambda-status=failed');\n  throw error;\n}",
              "err": {},
              "uuid": "79039fc9-7a9e-45c6-9921-902d7bb33a57",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c7b9dc9-ff6e-4cad-ac81-384d46b31a6d",
            "79039fc9-7a9e-45c6-9921-902d7bb33a57"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 36083,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "cceb2ab5-28f2-4c97-8cf1-1149d26b3d5e",
          "title": "Invite and remove user by the Company Admin and measure metrics",
          "fullFile": "C:\\terenbro\\colorjob-measure-metrics\\test\\inviteAndRemoveUserByCA.test.js",
          "file": "\\test\\inviteAndRemoveUserByCA.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics \"before each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "timedOut": null,
              "duration": 35677,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await createDriver(browser, bVersion, os);",
              "err": {},
              "uuid": "f7fa5c86-28a0-4c1e-9f99-75739a2cdf9a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics \"after each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "timedOut": null,
              "duration": 228,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "if (driver) {\n  await driver.quit();\n}\nreturn;",
              "err": {},
              "uuid": "00bbe788-d89b-42e4-bf7d-26d9bd9c7289",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "invite user by the company admin",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics invite user by the company admin",
              "timedOut": null,
              "duration": 24182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await driver.executeScript(\"document.body.style.zoom='50%'\");\ntestname = `Invite user by the company admin${browser}`;\nawait driver.executeScript(`lambda-name=${testname}`);\nconst logginPageTest = new LoginPage(driver, config.urlLoginPage);\nconst inviteUserTest = new InviteUser(driver);\nawait logginPageTest.openLoginForm();\nawait logginPageTest.fillEmailInput(config.emailCA);\nawait logginPageTest.fillPasswordInput(config.passwordCA);\nawait logginPageTest.checkSaveForFuture();\nawait logginPageTest.login(config.mainCompanyPage);\ntry {\n  await inviteUserTest.goToView(config.projectNameMain, 'ca');\n  await inviteUserTest.goToSelektTab(config.users);\n  const firstMeasure =\n    await inviteUserTest.openInviteUserFormInProjectMeasureTime();\n  const secondMeasure =\n    await inviteUserTest.fillInviteFormByCAMeasureTime(\n      config.emailUseForTest,\n      config.projManager\n    );\n  await inviteUserTest.checkCreateNewUser(config.emailUseForTest);\n  inviteUserMeasure['Time metrics for invite user by CA'] = {\n    ...firstMeasure,\n    ...secondMeasure,\n  };\n  if (browser === 'Safari') {\n    saveMetrics(\n      config.metricsFilePath,\n      config.metricfileNameSafari,\n      inviteUserMeasure\n    );\n  } else {\n    saveMetrics(\n      config.metricsFilePath,\n      config.metricfileNameChrom,\n      inviteUserMeasure\n    );\n  }\n  await driver.executeScript('lambda-status=passed');\n} catch (error) {\n  await makeScreenshot(driver, 'user_create_by_CA');\n  await driver.executeScript('lambda-status=failed');\n  throw error;\n}",
              "err": {},
              "uuid": "5b681495-6549-49d5-a9bd-96afd309b75d",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "remove user by the company admin",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics remove user by the company admin",
              "timedOut": null,
              "duration": 16480,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testname = `Remove user by the company admin${browser}`;\nawait driver.executeScript(`lambda-name=${testname}`);\nconst logginPageTest = new LoginPage(driver, config.urlLoginPage);\nconst removeUserTest = new RemoveUser(driver);\nawait logginPageTest.openLoginForm();\nawait logginPageTest.fillEmailInput(config.emailCA);\nawait logginPageTest.fillPasswordInput(config.passwordCA);\nawait logginPageTest.checkSaveForFuture();\nawait logginPageTest.login(config.mainCompanyPage);\ntry {\n  await removeUserTest.goToUserList('ca');\n  await removeUserTest.findUser(\n    config.emailUseForTest,\n    config.mainCompanyUsersPage\n  );\n  await removeUserTest.removefindUser();\n  await removeUserTest.checkIfUserRemove(\n    config.emailUseForTest,\n    config.mainCompanyUsersPage\n  );\n  await driver.executeScript('lambda-status=passed');\n} catch (error) {\n  await makeScreenshot(driver, 'user_remove_by_CA');\n  await driver.executeScript('lambda-status=failed');\n  throw error;\n}",
              "err": {},
              "uuid": "89cfb242-7dbf-40b2-8ee1-726f1b0f8af8",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b681495-6549-49d5-a9bd-96afd309b75d",
            "89cfb242-7dbf-40b2-8ee1-726f1b0f8af8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 40662,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "reports-parallel",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "colorjob",
        "reportFilename": "reports-parallel"
      },
      "version": "6.2.0"
    }
  }
}