{
  "stats": {
    "suites": 3,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-17T07:51:22.394Z",
    "end": "2024-07-17T07:53:26.243Z",
    "duration": 123849,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "48b0dbd2-b320-42d4-a5f5-9e4dc463aaf5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6469e4d4-1c4c-44ea-be32-da88d5620f12",
          "title": "Create, edit and remove project by the SA and measure metrics in Chrome",
          "fullFile": "C:\\terenbro\\colorjob-measure-metrics\\test\\createEditRemoveProjectBySA.test.js",
          "file": "\\test\\createEditRemoveProjectBySA.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Create, edit and remove project by the SA and measure metrics in Chrome\"",
              "fullTitle": "Create, edit and remove project by the SA and measure metrics in Chrome \"before each\" hook in \"Create, edit and remove project by the SA and measure metrics in Chrome\"",
              "timedOut": false,
              "duration": 3090,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await createDriver(browser, bVersion, os);",
              "err": {},
              "uuid": "c95bee56-e97f-4b45-be1b-e0adc4fa122e",
              "parentUUID": "6469e4d4-1c4c-44ea-be32-da88d5620f12",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Create, edit and remove project by the SA and measure metrics in Chrome\"",
              "fullTitle": "Create, edit and remove project by the SA and measure metrics in Chrome \"after each\" hook in \"Create, edit and remove project by the SA and measure metrics in Chrome\"",
              "timedOut": false,
              "duration": 257,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver) {\n  await driver.quit();\n}",
              "err": {},
              "uuid": "0244f32c-b3c5-4d42-86fa-7f46980e5728",
              "parentUUID": "6469e4d4-1c4c-44ea-be32-da88d5620f12",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "create new project",
              "fullTitle": "Create, edit and remove project by the SA and measure metrics in Chrome create new project",
              "timedOut": false,
              "duration": 24099,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (isRunningInDocker || isRunningInTeamCity) {\n  testname = `Create new project in ${browser}`;\n  await driver.executeScript(`lambda-name=${testname}`);\n}\nconsole.log(Date().toLocaleLowerCase(), 'date', config.urlLoginPage);\nconst logginPageTest = new LoginPage(driver, config.urlLoginPage);\nconst createProjectTest = new CreateProject(driver);\nawait logginPageTest.openLoginForm();\nawait logginPageTest.fillEmailInput(config.email);\nawait logginPageTest.fillPasswordInput(config.password);\nawait logginPageTest.checkSaveForFuture();\nawait logginPageTest.login(config.urlhomePageForCheck);\ntry {\n  const firstMeasure =\n    await createProjectTest.goToProjectListMeasureTime();\n  const secondMeasure =\n    await createProjectTest.fillCreateProjectFieldsMeasureTime(\n      config.companyName,\n      newProjectkey,\n      newProjectNumber,\n      newCompanyProjectBelong,\n      newProjectStreet,\n      newProjectApp,\n      newProjectState,\n      newCompanProjectCity,\n      newProjectZip,\n      newProjectClientName,\n      startDate,\n      eneDate\n    );\n  const thirdMeasure =\n    await createProjectTest.goToProjectDetailsPageMeasureTime(\n      config.companyName\n    );\n  createProjectMesuer['Time metrics for project creation by the SA'] = {\n    ...firstMeasure,\n    ...secondMeasure,\n    ...thirdMeasure,\n  };\n  if (browser === 'Safari') {\n    saveMetrics(\n      config.metricsFilePath,\n      config.metricfileNameSafari,\n      createProjectMesuer\n    );\n  } else {\n    saveMetrics(\n      config.metricsFilePath,\n      config.metricfileNameChrom,\n      createProjectMesuer\n    );\n  }\n  if (isRunningInDocker || isRunningInTeamCity) {\n    await driver.executeScript('lambda-status=passed');\n  }\n} catch (error) {\n  await makeScreenshot(driver, 'project_create');\n  if (isRunningInDocker || isRunningInTeamCity) {\n    await driver.executeScript('lambda-status=failed');\n  }\n  throw error;\n}",
              "err": {},
              "uuid": "9baf065d-72e1-4473-ae8e-4c638ab0c654",
              "parentUUID": "6469e4d4-1c4c-44ea-be32-da88d5620f12",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "remove project",
              "fullTitle": "Create, edit and remove project by the SA and measure metrics in Chrome remove project",
              "timedOut": false,
              "duration": 14275,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (isRunningInDocker || isRunningInTeamCity) {\n  testname = `Remove new project in ${browser}`;\n  await driver.executeScript(`lambda-name=${testname}`);\n}\nconsole.log(Date().toLocaleLowerCase(), 'date', config.urlLoginPage);\nconst logginPageTest = new LoginPage(driver, config.urlLoginPage);\nconst removeProject = new RemoveProject(driver);\ntry {\n  await logginPageTest.openLoginForm();\n  await logginPageTest.fillEmailInput(config.email);\n  await logginPageTest.fillPasswordInput(config.password);\n  await logginPageTest.checkSaveForFuture();\n  await logginPageTest.login(config.urlhomePageForCheck);\n  await removeProject.goToProjectList();\n  await removeProject.findProject(\n    config.companyName,\n    config.projectsPage\n  );\n  await removeProject.removefindProject(config.companyName);\n  if (isRunningInDocker || isRunningInTeamCity) {\n    await driver.executeScript('lambda-status=passed');\n  }\n} catch (error) {\n  await makeScreenshot(driver, 'project_remove');\n  if (isRunningInDocker || isRunningInTeamCity) {\n    await driver.executeScript('lambda-status=failed');\n  }\n  throw error;\n}",
              "err": {},
              "uuid": "afbb0d3b-b57c-43f1-b3c6-3f798fd191ec",
              "parentUUID": "6469e4d4-1c4c-44ea-be32-da88d5620f12",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9baf065d-72e1-4473-ae8e-4c638ab0c654",
            "afbb0d3b-b57c-43f1-b3c6-3f798fd191ec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 38374,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "a24a129f-169e-4019-b60d-5a96249934ca",
          "title": "Invite and remove user by the Company Admin and measure metrics",
          "fullFile": "C:\\terenbro\\colorjob-measure-metrics\\test\\inviteAndRemoveUserByCA.test.js",
          "file": "\\test\\inviteAndRemoveUserByCA.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics \"before each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "timedOut": false,
              "duration": 2669,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await createDriver(browser, bVersion, os);",
              "err": {},
              "uuid": "8a680a5f-17f3-4cd3-b0b3-50f7786ef7aa",
              "parentUUID": "a24a129f-169e-4019-b60d-5a96249934ca",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics \"after each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "timedOut": false,
              "duration": 103,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver) {\n  await driver.quit();\n}\nreturn;",
              "err": {},
              "uuid": "9ec82c08-e504-482c-b97a-322a06bd537b",
              "parentUUID": "a24a129f-169e-4019-b60d-5a96249934ca",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "invite user by the company admin",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics invite user by the company admin",
              "timedOut": false,
              "duration": 20445,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if(isRunningInTeamCity || isRunningInDocker){\ntestname = `Invite user by the company admin in the ${browser}`;\nawait driver.executeScript(`lambda-name=${testname}`);\n    }\nconst logginPageTest = new LoginPage(driver, config.urlLoginPage);\nconst inviteUserTest = new InviteUser(driver);\nawait logginPageTest.openLoginForm();\nawait logginPageTest.fillEmailInput(config.emailCA);\nawait logginPageTest.fillPasswordInput(config.passwordCA);\nawait logginPageTest.checkSaveForFuture();\nawait logginPageTest.login(config.mainCompanyPage);\ntry {\n  await inviteUserTest.goToView(config.projectNameMain, 'ca');\n  await inviteUserTest.goToSelektTab(config.users);\n  const firstMeasure =\n    await inviteUserTest.openInviteUserFormInProjectMeasureTime();\n  const secondMeasure =\n    await inviteUserTest.fillInviteFormByCAMeasureTime(\n      config.emailUseForTest,\n      config.projManager\n    );\n  await inviteUserTest.checkCreateNewUser(config.emailUseForTest);\n  inviteUserMeasure['Time metrics for invite user by CA'] = {\n    ...firstMeasure,\n    ...secondMeasure,\n  };\n  if (browser === 'Safari') {\n    saveMetrics(\n      config.metricsFilePath,\n      config.metricfileNameSafari,\n      inviteUserMeasure\n    );\n  } else {\n    saveMetrics(\n      config.metricsFilePath,\n      config.metricfileNameChrom,\n      inviteUserMeasure\n    );\n  }\n  if(isRunningInDocker || isRunningInTeamCity){\n    await driver.executeScript('lambda-status=passed');\n  }\n} catch (error) {\n  await makeScreenshot(driver, 'user_create_by_CA');\n  if(isRunningInTeamCity || isRunningInDocker){\n  await driver.executeScript('lambda-status=failed');\n  }\n  throw error;\n}",
              "err": {},
              "uuid": "5be2b655-4c28-4ea2-80c5-97ad743bbb2a",
              "parentUUID": "a24a129f-169e-4019-b60d-5a96249934ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "remove user by the company admin",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics remove user by the company admin",
              "timedOut": false,
              "duration": 12830,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if(isRunningInTeamCity || isRunningInDocker){\ntestname = `Remove user by the company admin in the ${browser}`;\nawait driver.executeScript(`lambda-name=${testname}`);}\nconst logginPageTest = new LoginPage(driver, config.urlLoginPage);\nconst removeUserTest = new RemoveUser(driver);\nawait logginPageTest.openLoginForm();\nawait logginPageTest.fillEmailInput(config.emailCA);\nawait logginPageTest.fillPasswordInput(config.passwordCA);\nawait logginPageTest.checkSaveForFuture();\nawait logginPageTest.login(config.mainCompanyPage);\ntry {\n  await removeUserTest.goToUserList('ca');\n  await removeUserTest.findUser(\n    config.emailUseForTest,\n    config.mainCompanyUsersPage\n  );\n  await removeUserTest.removefindUser();\n  await removeUserTest.checkIfUserRemove(\n    config.emailUseForTest,\n    config.mainCompanyUsersPage\n  );\n  if(isRunningInTeamCity || isRunningInDocker){\n  await driver.executeScript('lambda-status=passed');}\n} catch (error) {\n  await makeScreenshot(driver, 'user_remove_by_CA');\n  if(isRunningInTeamCity || isRunningInDocker){\n  await driver.executeScript('lambda-status=failed');}\n  throw error;\n}",
              "err": {},
              "uuid": "6fbd4c21-8fe8-4e8b-b2bf-20e265168909",
              "parentUUID": "a24a129f-169e-4019-b60d-5a96249934ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5be2b655-4c28-4ea2-80c5-97ad743bbb2a",
            "6fbd4c21-8fe8-4e8b-b2bf-20e265168909"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 33275,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "ba206846-5d3b-4421-b6de-c1da3f98bdac",
          "title": "Invite and remove user by the Company Admin and measure metrics",
          "fullFile": "C:\\terenbro\\colorjob-measure-metrics\\test\\inviteAndRemoveUserByCA.test.js",
          "file": "\\test\\inviteAndRemoveUserByCA.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics \"before each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "timedOut": false,
              "duration": 2657,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await createDriver(browser, bVersion, os);",
              "err": {},
              "uuid": "29d26a9d-9aab-46d2-a3b8-dc5cc8ac155e",
              "parentUUID": "ba206846-5d3b-4421-b6de-c1da3f98bdac",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics \"after each\" hook in \"Invite and remove user by the Company Admin and measure metrics\"",
              "timedOut": false,
              "duration": 244,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver) {\n  await driver.quit();\n}\nreturn;",
              "err": {},
              "uuid": "e6aa7090-f0cc-40cc-8bed-9285483f2f09",
              "parentUUID": "ba206846-5d3b-4421-b6de-c1da3f98bdac",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "invite user by the company admin",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics invite user by the company admin",
              "timedOut": false,
              "duration": 21263,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if(isRunningInTeamCity || isRunningInDocker){\ntestname = `Invite user by the company admin in the ${browser}`;\nawait driver.executeScript(`lambda-name=${testname}`);\n    }\nconst logginPageTest = new LoginPage(driver, config.urlLoginPage);\nconst inviteUserTest = new InviteUser(driver);\nawait logginPageTest.openLoginForm();\nawait logginPageTest.fillEmailInput(config.emailCA);\nawait logginPageTest.fillPasswordInput(config.passwordCA);\nawait logginPageTest.checkSaveForFuture();\nawait logginPageTest.login(config.mainCompanyPage);\ntry {\n  await inviteUserTest.goToView(config.projectNameMain, 'ca');\n  await inviteUserTest.goToSelektTab(config.users);\n  const firstMeasure =\n    await inviteUserTest.openInviteUserFormInProjectMeasureTime();\n  const secondMeasure =\n    await inviteUserTest.fillInviteFormByCAMeasureTime(\n      config.emailUseForTest,\n      config.projManager\n    );\n  await inviteUserTest.checkCreateNewUser(config.emailUseForTest);\n  inviteUserMeasure['Time metrics for invite user by CA'] = {\n    ...firstMeasure,\n    ...secondMeasure,\n  };\n  if (browser === 'Safari') {\n    saveMetrics(\n      config.metricsFilePath,\n      config.metricfileNameSafari,\n      inviteUserMeasure\n    );\n  } else {\n    saveMetrics(\n      config.metricsFilePath,\n      config.metricfileNameChrom,\n      inviteUserMeasure\n    );\n  }\n  if(isRunningInDocker || isRunningInTeamCity){\n    await driver.executeScript('lambda-status=passed');\n  }\n} catch (error) {\n  await makeScreenshot(driver, 'user_create_by_CA');\n  if(isRunningInTeamCity || isRunningInDocker){\n  await driver.executeScript('lambda-status=failed');\n  }\n  throw error;\n}",
              "err": {},
              "uuid": "5be6626c-a006-4bf8-b1e8-10cef46e33de",
              "parentUUID": "ba206846-5d3b-4421-b6de-c1da3f98bdac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "remove user by the company admin",
              "fullTitle": "Invite and remove user by the Company Admin and measure metrics remove user by the company admin",
              "timedOut": false,
              "duration": 13560,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if(isRunningInTeamCity || isRunningInDocker){\ntestname = `Remove user by the company admin in the ${browser}`;\nawait driver.executeScript(`lambda-name=${testname}`);}\nconst logginPageTest = new LoginPage(driver, config.urlLoginPage);\nconst removeUserTest = new RemoveUser(driver);\nawait logginPageTest.openLoginForm();\nawait logginPageTest.fillEmailInput(config.emailCA);\nawait logginPageTest.fillPasswordInput(config.passwordCA);\nawait logginPageTest.checkSaveForFuture();\nawait logginPageTest.login(config.mainCompanyPage);\ntry {\n  await removeUserTest.goToUserList('ca');\n  await removeUserTest.findUser(\n    config.emailUseForTest,\n    config.mainCompanyUsersPage\n  );\n  await removeUserTest.removefindUser();\n  await removeUserTest.checkIfUserRemove(\n    config.emailUseForTest,\n    config.mainCompanyUsersPage\n  );\n  if(isRunningInTeamCity || isRunningInDocker){\n  await driver.executeScript('lambda-status=passed');}\n} catch (error) {\n  await makeScreenshot(driver, 'user_remove_by_CA');\n  if(isRunningInTeamCity || isRunningInDocker){\n  await driver.executeScript('lambda-status=failed');}\n  throw error;\n}",
              "err": {},
              "uuid": "666562af-d27b-47c8-8075-01bd40691560",
              "parentUUID": "ba206846-5d3b-4421-b6de-c1da3f98bdac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5be6626c-a006-4bf8-b1e8-10cef46e33de",
            "666562af-d27b-47c8-8075-01bd40691560"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 34823,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "reports",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "colorjob",
        "reportFilename": "reports"
      },
      "version": "6.2.0"
    }
  }
}